<style lang="less">
  page {
    height: 100%;
    font-weight: 300;
    background: #f5f5f5;
    color: #4d4d4d;
    font: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;
    line-height: 1.4em;
  }

  .container {
    height: 100%;
  }

  button {
    margin: 0;
    padding: 0;
    border: 0;
    background: none;
    font-size: 100%;
    vertical-align: baseline;
    font-family: inherit;
    font-weight: inherit;
    color: inherit;
    -webkit-appearance: none;
    appearance: none;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  :focus {
    outline: 0;
  }

  .hidden {
    display: none;
  }

  .todoapp {
    background: #fff;
    /*margin: 130px 0 40px 0;*/
    /*position: relative;*/
    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2),
    0 25px 50px 0 rgba(0, 0, 0, 0.1);
  }

  .todoapp input::-webkit-input-placeholder {
    font-style: italic;
    font-weight: 300;
    color: #e6e6e6;
  }

  .todoapp input::-moz-placeholder {
    font-style: italic;
    font-weight: 300;
    color: #e6e6e6;
  }

  .todoapp input::input-placeholder {
    font-style: italic;
    font-weight: 300;
    color: #e6e6e6;
  }

  .todoapp .h1 {
    width: 100%;
    font-size: 100px;
    line-height: 100px;
    font-weight: 100;
    text-align: center;
    color: rgba(175, 47, 47, 0.15);
  }

  .new-todo,
  .edit {
    position: relative;
    margin: 0;
    width: 100%;
    font-size: 48rpx;
    font-family: inherit;
    font-weight: inherit;
    line-height: 64rpx;
    height: 128rpx;
    color: inherit;
    padding: 6px;
    border: 1px solid #999;
    box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);
    box-sizing: border-box;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  .new-todo {
    padding: 32rpx 32rpx 32rpx 120rpx;
    border: none;
    background: rgba(0, 0, 0, 0.003);
    box-shadow: inset 0 -2px 1px rgba(0, 0, 0, 0.03);
  }

  .main {
    position: relative;
    z-index: 2;
    border-top: 1px solid #e6e6e6;
  }

  label[for='toggle-all'] {
    display: none;
  }

  .toggle-all {
    position: absolute;
    top: -55px;
    left: 0;
    width: 50px;
    height: 50px;
    text-align: center;
    border: none; /* Mobile Safari */
  }

  .toggle-all:before {
    content: '❯';
    font-size: 22px;
    line-height: 50px;
    color: #e6e6e6;
  }

  .toggle-all.checked:before {
    color: #737373;
  }

  .toggle-all .checkbox-label {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    width: 50px;
    height: 50px;
  }
  .toggle-all .checkbox {
    position: absolute;
    top: 0;
    left: -9999px;
  }

  .todo-list {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .todo-list .li {
    position: relative;
    font-size: 24px;
    border-bottom: 1px solid #ededed;
  }

  .todo-list .li:last-child {
    border-bottom: none;
  }

  .todo-list .li.editing {
    border-bottom: none;
    padding: 0;
  }

  .todo-list .li.editing .edit {
    display: block;
    width: 506px;
    padding: 12px 16px;
    margin: 0 0 0 43px;
  }

  .todo-list .li.editing .view {
    display: none;
  }

  .todo-list .li .toggle {
    text-align: center;
    width: 40px;
    height:40px;
    position: absolute;
    top: 0;
    bottom: 0;
    margin: auto 0;
  }
  .todo-list .li .checkbox-label {
    width: 40px;
    height:40px;
    position: absolute;
    top: 0;
    left:0;

  }
  .todo-list .li .checkbox {
    position: absolute;
    top: 0;
    left: -9999px;
  }
  .todo-list .li .icon {
    width: 40px;
    height:40px;
  }
  .todo-list .li .check:after {
    content: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="-10 -18 100 135"><circle cx="50" cy="50" r="50" fill="none" stroke="#ededed" stroke-width="3"/></svg>');
  }

  .todo-list .li .checked:after {
    content: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="-10 -18 100 135"><circle cx="50" cy="50" r="50" fill="none" stroke="#bddad5" stroke-width="3"/><path fill="#5dc2af" d="M72 25L42 71 27 56l-4 4 20 20 34-52z"/></svg>');
  }

  .todo-list .li .label {
    word-break: break-all;
    padding: 15px 60px 15px 15px;
    margin-left: 45px;
    display: block;
    line-height: 1.2;
    transition: color 0.4s;
  }

  .todo-list .li.completed .label {
    color: #d9d9d9;
    text-decoration: line-through;
  }

  .todo-list .li .destroy {
    display: none;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    width: 40px;
    height: 40px;
    line-height: 40px;
    margin: auto 0 11px;
    font-size: 30px;
    color: #cc9a9a;
    border:none;
    transition: color 0.2s ease-out;
  }

  .todo-list .li .destroy:hover {
    color: #af5b5e;
  }

  .todo-list .li .destroy:after {
    content: '×';
  }

  .todo-list .li:hover .destroy {
    display: block;
  }

  .todo-list .li .edit {
    display: none;
  }

  .todo-list .li.editing:last-child {
    margin-bottom: -1px;
  }

  .footer {
    color: #777;
    padding: 10px 15px;
    height: 20px;
    border-top: 1px solid #e6e6e6;
  }

  .footer:after {
    content: '';
    position: absolute;
    right: 0;
    bottom: 0;
    left: 0;
    height: 50px;
    overflow: hidden;
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2),
    0 8px 0 -3px #f6f6f6,
    0 9px 1px -3px rgba(0, 0, 0, 0.2),
    0 16px 0 -6px #f6f6f6,
    0 17px 2px -6px rgba(0, 0, 0, 0.2);
  }

  .todo-count {
    float: left;
    text-align: left;
    font-weight: 300;
  }


  .filters {
    font-size: 12px;
    margin-left:100px;
  }

  .filters .li {
    display: inline;
  }

  .filters .li  {
    color: inherit;
    margin: 3px;
    padding: 3px 7px;
    text-decoration: none;
    border: 1px solid transparent;
    border-radius: 3px;
  }

  .filters .li:hover {
    border-color: rgba(175, 47, 47, 0.1);
  }
  .filters .li.selected {
    border-color: rgba(175, 47, 47, 0.2);
  }






  .info {
    margin: 65px auto 0;
    color: #bfbfbf;
    font-size: 12px;
    text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);
    text-align: center;
  }



  /*
      Hack to remove background from Mobile Safari.
      Can't use it globally since it destroys checkboxes in Firefox
  */
  @media screen and (-webkit-min-device-pixel-ratio: 0) {
    .toggle-all,
    .todo-list li .toggle {
      background: none;
    }

    .todo-list li .toggle {
      height: 40px;
    }

    .toggle-all {
      -webkit-transform: rotate(90deg);
      transform: rotate(90deg);
      -webkit-appearance: none;
      appearance: none;
    }
  }

</style>
<template>
  <view class="container">
    <view class="todoapp">
      <view class="header">
        <view class="h1">todos</view>
        <input class="new-todo" value="{{newTodo}}"
               auto-focus
               placeholder="What needs to be done?"  @input="change"
               @blur="addTodo"/>
      </view>
      <view class="main" wx:if="{{todos.length}}" v-cloak>
        <checkbox-group @change="allChange({{allDone}})" class="toggle-all" :class="{checked:allDone}">
          <label class="checkbox-label" >
            <checkbox class="checkbox"  />
          </label>
        </checkbox-group>
        <view class="todo-list">
          <repeat for="{{filteredTodos}}" key="id" index="id" item="todo">
              <view class="li todo" :class="{ completed: todo.completed, editing: editedTodo && todo.id == editedTodo.id }">
                <view class="view">
                  <checkbox-group @change="checkboxChange({{todo}})" class="toggle">
                    <label class="checkbox-label" >
                      <checkbox class="checkbox" value="{{todo.title}}" checked="{{todo.completed}}"/>
                    </label>
                    <view class="icon">
                      <view class="circle check" wx:if="{{!todo.completed}}"></view>
                      <view class="circle checked"  wx:if="{{todo.completed}}"></view>
                    </view>
                  </checkbox-group>
                  <view class="label" @longpress="editTodo({{todo}})">
                    <view wx:if="{{ todo == editedTodo}}">editing</view>
                    {{ todo.title }}
                  </view>
                  <view class="destroy" @tap="removeTodo({{todo}})"></view>
                </view>
                <input class="edit" type="text"
                       value="{{beforeEditCache}}" @input="changeEdit"
                       @blur="doneEdit({{todo}},{{beforeEditCache}})"/>
              </view>
          </repeat>
        </view>
      </view>
      <view class="footer"  wx:if="{{todos.length}}">
        <view class="todo-count">
          {{ remaining }} {{ remaining  === 1 ? 'item' : 'items' }} left
        </view>
        <view class="filters">
          <view class="li" @tap="changeVisibility(all)"  :class="{ selected: visibility == 'all' }">
            All
          </view>
          <view class="li" @tap="changeVisibility(active)"  :class="{ selected: visibility == 'active' }" >
            Active
          </view>
          <view class="li" @tap="changeVisibility(completed)" :class="{ selected: visibility == 'completed' }">
            Completed
          </view>
          <view class="li" @tap="removeCompleted" wx:if="{{todos.length > remaining}}">
            Clear
          </view>
        </view>

      </view>
    </view>
    <view class="info">
      <view>long-tap to edit a todo</view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'

  var STORAGE_KEY = 'todos-vuejs-2.0'
  var todoStorage = {
    fetch: function () {
      let todos;
      try {
        todos = wx.getStorageSync(STORAGE_KEY)
      } catch (e) {
        // Do something when catch error
      }
      todos = todos||[];
      todos.forEach(function (todo, index) {
        todo.id = index
      })
      todoStorage.uid = todos.length
      return todos
    },
    save: function (todos) {
      try {
        wx.setStorageSync(STORAGE_KEY,todos)
      } catch (e) {
      }
    }
  }

  // visibility filters
  var filters = {
    all: function (todos) {
      return todos
    },
    active: function (todos) {
      return todos.filter(function (todo) {
        return !todo.completed
      })
    },
    completed: function (todos) {
      return todos.filter(function (todo) {
        return todo.completed
      })
    }
  }


  export default class Index extends wepy.page {

    data = {
      todos:[],
      newTodo: '',
      editedTodo: null,
      beforeEditCache: null,
      visibility: 'all'
    };

    watch = {
      todos: {
        handler: function (todos) {
          todoStorage.save(todos)
        },
        deep: true
      }
    }

    // computed properties
    // http://vuejs.org/guide/computed.html
    computed = {
      filteredTodos: function () {
        return filters[this.visibility](this.todos)
      },
      remaining: function () {
        return filters.active(this.todos).length
      },
      allDone:function () {
        return this.remaining === 0
      },
//      allDone: {
//        get: function () {
//          console.warn('allDone')
//          return this.remaining === 0
//        },
//        set: function (value) {
//          console.warn('allDone',value)
//          this.todos.forEach(function (todo) {
//            todo.completed = value
//          })
//        }
//      }
    }

    filters = {
      pluralize: function (n) {
        console.warn('pluralize',n)

        return n === 1 ? 'item' : 'items'
      }
    }

    // methods that implement data logic.
    // note there's no DOM manipulation here at all.
    methods = {
      allChange(allDone){
        this.todos =  this.todos.map((item)=>({...item,completed:!allDone}))

      },
      changeVisibility(visibility){
        this.visibility = visibility
      },
      checkboxChange:(todo)=>{
        this.todos = this.todos.map((item)=>item.id==todo.id?{...todo,completed:!todo.completed}:item)
      },
      change:(e)=>{
        this.newTodo = e.detail.value;
      },
      addTodo:()=>{
        var value = this.newTodo && this.newTodo.trim()
        if (!value) {
          return
        }
        this.todos.push({
          id: todoStorage.uid++,
          title: value,
          completed: false
        })
        this.newTodo = ''
      },

      removeTodo (todo) {
        this.remove(todo)
      },

      editTodo (todo) {
        console.warn('editTodo',todo)
        this.beforeEditCache = todo.title
        this.editedTodo = todo
      },

      doneEdit (todo,title) {
        if (!this.editedTodo) {
          return
        }
        this.editedTodo = null
        title = title.trim()
        if (!title) {
          this.remove(todo)
        }
        else {
          this.todos =  this.todos.map((item)=>item.id==todo.id?{...todo,title}:item)
        }
        this.beforeEditCache = null
      },
      changeEdit(e){
        this.beforeEditCache = e.detail.value;
      },
      cancelEdit (todo) {
        this.editedTodo = null
        todo.title = this.beforeEditCache
      },

      removeCompleted  () {
        console.warn('removeCompleted',filters.active(this.todos))
        this.todos = filters.active(this.todos)
      }
    }
    remove (todo) {
      this.todos =  this.todos.filter((item)=>item.id!=todo.id)
    }
    onLoad() {

      let self = this;

      this.todos = todoStorage.fetch()
      console.warn('todos', this.todos)

    }
  }
</script>
